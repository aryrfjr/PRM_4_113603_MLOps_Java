import { Component, OnInit } from '@angular/core';

import { finalize } from 'rxjs/operators';

import { NominalCompositionService } from '../../core/services/nominal-composition.service';
import { RunService } from '../../core/services/run.service';
import { SubRunService } from '../../core/services/sub-run.service';
import { SimulationArtifactService } from '../../core/services/simulation-artifact.service';
import { DataOpsService } from '../../core/services/data-ops.service';
import { NominalComposition } from '../../core/models/nominal-composition.model';
import { Run } from '../../core/models/run.model';
import { SubRun } from '../../core/models/sub-run.model';
import { SimulationArtifact } from '../../core/models/simulation-artifact.model';
import { TableColumn } from '../../shared/components/datatable/datatable.component';

@Component({
  selector: 'app-pre-deployment-exploitation',
  templateUrl: './pre-deployment-exploitation.component.html',
  styleUrls: ['./pre-deployment-exploitation.component.css']
})

export class PreDeploymentExploitationComponent implements OnInit {

  //
  // Support to a kind of ViewModel from MVVM (Model-View-ViewModel) approach
  //
  //////////////////////////////////////////////////////

  get uiState() {

    return {
      displayLoadingMessage: this.serviceRequestOn,
      displayScheduleForm: !this.serviceRequestOn && this.selectedNominalCompositionId != null,
      //displaySubRunsTable: this.subRunsTableData.length > 0,
      //displaySimulationArtifactsTable: this.simulationArtifactsTableData.length > 0,
      suggestRunSelection: !this.serviceRequestOn && this.selectedNominalCompositionRunId === null,
      isTabScheduleActive: this.activeTab === 'tab1',
      isTabViewActive: this.activeTab === 'tab2',
      displayAlertMessage: this.serviceRequestErrorMessage != null || this.scheduleSuccessMessage != null,
      alertMessageType: this.serviceRequestErrorMessage != null ? "error" : this.scheduleSuccessMessage != null ? "success" : null,
      alertMessage: this.serviceRequestErrorMessage ?? this.scheduleSuccessMessage ?? null
    };

  }

  // Messages and flags related to data operations
  serviceRequestOn = false;
  serviceRequestErrorMessage: string | null = null;
  scheduleSuccessMessage: string | null = null;

  //
  // Attributes related to the drop-down with Nominal Compositions
  //
  //////////////////////////////////////////////////////

  allNominalCompositions: NominalComposition[] = [];
  selectedNominalCompositionId: number | null = null;
  selectedNominalCompositionName: string | null = null;
  allSelectedNominalCompositionRuns: Run[] = [];
  selectedNominalCompositionRunId: number | null = null;
  selectedNominalCompositionRunNumber: number | null = null;

  //
  // Attributes for the rest of UI components
  //
  //////////////////////////////////////////////////////

  activeTab: 'tab1' | 'tab2' = 'tab1';

  //
  // Component related methods
  //
  //////////////////////////////////////////////////////

  constructor(// NOTE: All these dependencies will be injected.
    private nominalCompositionService: NominalCompositionService,
    private runService: RunService,
    private subRunService: SubRunService,
    private simulationArtifactService: SimulationArtifactService,
    private dataOpsService: DataOpsService
  ) {}

  ngOnInit(): void {

    this.startedServiceRequest()

    // Loading the Nominal Compositions for the corresponding drop-down
    this.nominalCompositionService.getAll().pipe(
      finalize(() => {
        this.finalizedServiceRequest();
      })
    ).subscribe({
      next: (data) => {
        this.allNominalCompositions = data
      },
      error: (err) => {
        console.error('Failed to fetch Nominal Compositions', err)
        this.serviceRequestErrorMessage = `Failed to fetch Nominal Compositions. Error: ${err?.error?.message}`;
      }
    });

  }

  cleanMessages(): void {
    this.serviceRequestErrorMessage = null;
    this.scheduleSuccessMessage = null;
  }

  startedServiceRequest(): void {
    this.serviceRequestOn = true;
    this.cleanMessages();
  }

  finalizedServiceRequest(): void {
    this.serviceRequestOn = false;
  }

  //
  // Methods related to the two tabs
  //
  //////////////////////////////////////////////////////

  activateTab2(): void {

    this.activeTab = 'tab2';

    if (this.selectedNominalCompositionId) {
      this.fetchRunsForSelectedComposition();
      this.cleanMessages();
    }

  }

  //
  // Methods related to input "Select Nominal Composition"
  //
  //////////////////////////////////////////////////////

  onNominalCompositionSelected(nominalId: number): void {

    // NOTE: The + coerces nominalId to a number
    this.selectedNominalCompositionId = nominalId;
    this.selectedNominalCompositionName = this.allNominalCompositions.find(nc => nc.id === +nominalId)?.name ?? null;

    this.fetchRunsForSelectedComposition();
    this.cleanRunsInfo();
    this.cleanMessages();

  }

  private fetchRunsForSelectedComposition(): void {

    if (!this.selectedNominalCompositionId) return;

    this.startedServiceRequest();

    this.runService.getAll(this.selectedNominalCompositionId).pipe(
      finalize(() => {
        this.finalizedServiceRequest();
      })
    ).subscribe({
        next: (data) => {
          this.allSelectedNominalCompositionRuns = data;
        },
        error: (err) => {
          console.error('Failed to fetch Runs', err);
          this.serviceRequestErrorMessage = `Failed to fetch Runs. Error: ${err?.error?.message}`;
          this.cleanRunsInfo();
        }
      });

  }

  //
  // Methods related to input "select Run #"
  //
  //////////////////////////////////////////////////////

  onRunSelected(runId: number | string | null): void {

    // This also cleans the Simulation Artifact Data Table
    //this.cleanSubRunsInfo();

    if (this.activeTab === 'tab1') {
      // TODO: for SubRuns
    }

    this.selectedNominalCompositionRunId = runId as number;
    this.selectedNominalCompositionRunNumber = this.allSelectedNominalCompositionRuns.find(run => run.id === runId)?.run_number ?? null;
    //this.fetchSubRunsForSelectedRun();

  }

  private cleanRunsInfo() {

    //this.cleanSubRunsInfo();

  }

}
